# -*- coding: utf-8 -*-
"""Untitled106.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QF8oh3QrVQMV-TqDSL-UFM8RFw8HBqIe
"""

import streamlit as st
import pandas as pd
import numpy as np
import statsmodels.api as sm
import plotly.express as px
import requests
import io
from fpdf import FPDF
import joblib  # For AI model

# ==================== 🇨🇦 Styling for Visibility 🇨🇦 ====================
st.markdown(
    """
    <style>
        .stApp {
            background-color: #ffffff;
        }
        .title-text {
            font-size: 36px;
            font-weight: bold;
            color: #4a4a4a;
            text-align: center;
        }
        .sub-header {
            font-size: 24px;
            font-weight: bold;
            color: #333333;
            text-align: center;
        }
        .info-text {
            font-size: 18px;
            color: #4a4a4a;
            text-align: center;
        }
    </style>
    """,
    unsafe_allow_html=True,
)

# ==================== 🇨🇦 Title & Header 🇨🇦 ====================
st.markdown('<p class="title-text">🍁 Trade Impact Analysis & Policy Simulation Tool 🍁</p>', unsafe_allow_html=True)
st.image("https://upload.wikimedia.org/wikipedia/commons/c/cf/Flag_of_Canada.svg", width=200)

# ==================== 🌍 Fetch Real-Time Economic Indicators 🌍 ====================
st.markdown('<p class="sub-header">📊 Real-Time Economic Indicators</p>', unsafe_allow_html=True)
world_bank_url = "https://api.worldbank.org/v2/country/CA/indicator/NY.GDP.MKTP.CD?format=json"
response = requests.get(world_bank_url)

if response.status_code == 200:
    data = response.json()
    latest_gdp = data[1][0]["value"]
    st.markdown(f'<p class="info-text">🇨🇦 **Canada GDP (Latest):** CAD {latest_gdp:,.2f}</p>', unsafe_allow_html=True)
else:
    st.markdown('<p class="info-text">⚠️ Unable to fetch real-time GDP data.</p>', unsafe_allow_html=True)

# ==================== 🇨🇦 Sidebar Inputs 🇨🇦 ====================
st.sidebar.header("🇨🇦 Simulation Settings 🇨🇦")

sectors = ["Automotive", "Agriculture", "Manufacturing", "Energy", "Technology"]
selected_sector = st.sidebar.selectbox("Select Industry Sector:", sectors)
tariff_rate = st.sidebar.slider("Tariff Rate Increase (%)", 10, 50, 25, 5)

# ==================== 📉 Economic Impact Analysis 📉 ====================
st.markdown('<p class="sub-header">📉 Economic Impact Analysis</p>', unsafe_allow_html=True)

predicted_trade_volume = round(500 - (tariff_rate * 5), 2)
gdp_loss = round(0.05 * tariff_rate, 2)
job_loss = round(3000 * tariff_rate, 0)

economic_table = pd.DataFrame({
    "Indicator": ["Predicted Trade Volume (Billion CAD)", "GDP Loss Estimate (Billion CAD)", "Job Loss Estimate"],
    "Estimated Value": [predicted_trade_volume, gdp_loss, job_loss]
})

st.table(economic_table)

# ==================== ⚖️ Custom Policy Adjustments ⚖️ ====================
st.markdown('<p class="sub-header">⚖️ Custom Policy Adjustments</p>', unsafe_allow_html=True)
subsidy_amount = st.slider("Government Subsidy Support (Billion CAD)", 0, 50, 10, 1)
alternative_trade_agreements = st.selectbox("Expand Trade with:", ["EU", "China", "India", "Mexico", "Japan"])
corporate_tax_change = st.slider("Adjust Corporate Tax Rate (%)", -5, 5, 0, 1)

policy_results = {
    "Subsidy Amount (Billion CAD)": subsidy_amount,
    "New Trade Partner": alternative_trade_agreements,
    "Corporate Tax Adjustment (%)": corporate_tax_change
}
st.json(policy_results)

# ==================== 🔍 Predictive Economic Simulation 🔍 ====================
st.markdown('<p class="sub-header">📊 Predictive Economic Simulation</p>', unsafe_allow_html=True)

# Load pre-trained ML model for prediction (mock model)
try:
    model = joblib.load("ai_trade_model.pkl")
    future_trade_volume = model.predict([[tariff_rate, subsidy_amount, corporate_tax_change]])[0]
    st.markdown(f'<p class="info-text">📈 **Predicted Trade Volume in 5 Years:** {future_trade_volume:,.2f} Billion CAD</p>', unsafe_allow_html=True)
except:
    st.markdown('<p class="info-text">⚠️ AI model not found. Using default projections.</p>', unsafe_allow_html=True)

# ==================== 🤖 AI-Powered Trade Recommendations 🤖 ====================
st.markdown('<p class="sub-header">🤖 AI-Powered Trade Recommendations</p>', unsafe_allow_html=True)

if tariff_rate > 30:
    st.markdown('<p class="info-text">⚠️ **Recommendation:** Consider reducing tariffs to prevent excessive job losses.</p>', unsafe_allow_html=True)
elif subsidy_amount > 20:
    st.markdown('<p class="info-text">💡 **Recommendation:** Higher subsidies can help offset trade shocks.</p>', unsafe_allow_html=True)
else:
    st.markdown('<p class="info-text">✅ **Recommendation:** The current policy mix appears balanced.</p>', unsafe_allow_html=True)

# ==================== 📄 Export Reports to PDF & Excel 📄 ====================
st.markdown('<p class="sub-header">📑 Export Report</p>', unsafe_allow_html=True)

# 📥 Export to Excel
excel_buffer = io.BytesIO()
economic_table.to_excel(excel_buffer, index=False)
st.download_button(
    label="📥 Download Excel Report",
    data=excel_buffer.getvalue(),
    file_name="trade_impact_analysis.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

# 📥 Export to PDF
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)
pdf.cell(200, 10, "Trade Impact Analysis Report", ln=True, align='C')
pdf.ln(10)

pdf.cell(200, 10, f"Predicted Trade Volume: {predicted_trade_volume} Billion CAD", ln=True)
pdf.cell(200, 10, f"GDP Loss Estimate: {gdp_loss} Billion CAD", ln=True)
pdf.cell(200, 10, f"Job Loss Estimate: {job_loss}", ln=True)
pdf.ln(10)

pdf.cell(200, 10, f"Subsidy Support: {subsidy_amount} Billion CAD", ln=True)
pdf.cell(200, 10, f"New Trade Partner: {alternative_trade_agreements}", ln=True)
pdf.cell(200, 10, f"Corporate Tax Change: {corporate_tax_change}%", ln=True)

pdf_buffer = io.BytesIO()
pdf.output(pdf_buffer)

st.download_button(
    label="📥 Download PDF Report",
    data=pdf_buffer.getvalue(),
    file_name="trade_impact_analysis.pdf",
    mime="application/pdf"
)

# ==================== ✅ Final Message ✅ ====================
st.markdown('<p class="info-text">🍁 <strong>Prototype Version 2.0 - Developed by VisiVault Analytics Ltd.</strong> 🍁</p>', unsafe_allow_html=True)