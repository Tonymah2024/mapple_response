# -*- coding: utf-8 -*-
"""Untitled107.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HsDDpv7dz7u3Z7Xtg7oHZDgsQv-MJVjP
"""

import streamlit as st
import pandas as pd
import numpy as np
import statsmodels.api as sm
import plotly.express as px
import requests
import io
from fpdf import FPDF
import joblib  # For AI model
import openpyxl  # Ensure openpyxl is installed for Excel export

# ==================== ðŸ‡¨ðŸ‡¦ Styling for Visibility ðŸ‡¨ðŸ‡¦ ==================
st.markdown(
    """
    <style>
    .reportview-container { background-color: #f0f2f6; }
    .sidebar .sidebar-content { background-color: #f9f9f9; }
    </style>
    """,
    unsafe_allow_html=True
)

# **Title of the Web App**
st.title("Trade Impact Analysis & Policy Simulation Tool")

# **Sidebar for User Input**
st.sidebar.header("Simulation Settings")

# **User Inputs**
gdp_growth = st.sidebar.slider("GDP Growth Rate (%)", 0.0, 10.0, 3.0)
corporate_tax_change = st.sidebar.slider("Corporate Tax Change (%)", -10.0, 10.0, 0.0)
trade_tariff_change = st.sidebar.slider("Trade Tariff Change (%)", -5.0, 5.0, 0.0)

# **Dummy Data Simulation**
data = {
    "GDP Growth (%)": [gdp_growth, gdp_growth + 0.5, gdp_growth - 0.3],
    "Corporate Tax (%)": [corporate_tax_change, corporate_tax_change + 1, corporate_tax_change - 1],
    "Trade Tariff (%)": [trade_tariff_change, trade_tariff_change + 0.5, trade_tariff_change - 0.5],
}

economic_table = pd.DataFrame(data)

# **Show Data Table**
st.subheader("ðŸ“Š Economic Indicators Table")
st.write(economic_table)

# **Visualization**
fig = px.bar(economic_table, x=["Scenario 1", "Scenario 2", "Scenario 3"], y=["GDP Growth (%)", "Corporate Tax (%)", "Trade Tariff (%)"], barmode='group')
st.plotly_chart(fig)

# ðŸ“¥ **Export to Excel**
excel_buffer = io.BytesIO()
with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
    economic_table.to_excel(writer, index=False, sheet_name='Economic Indicators')
    writer.close()

excel_buffer.seek(0)  # Move cursor to the beginning
st.download_button(
    label="ðŸ“¥ Download Excel Report",
    data=excel_buffer,
    file_name="economic_report.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

# ðŸ“„ **Generate PDF Report**
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)
pdf.cell(200, 10, "Economic Analysis Report", ln=True, align='C')
pdf.ln(10)
pdf.cell(200, 10, f"GDP Growth: {gdp_growth}%", ln=True)
pdf.cell(200, 10, f"Corporate Tax Change: {corporate_tax_change}%", ln=True)
pdf.cell(200, 10, f"Trade Tariff Change: {trade_tariff_change}%", ln=True)

# **Fixing BytesIO Issue**
pdf_buffer = io.BytesIO()
pdf_content = pdf.output(dest='S').encode('latin1')  # Encode properly
pdf_buffer.write(pdf_content)
pdf_buffer.seek(0)  # Move cursor to beginning

# **Download PDF**
st.download_button(
    label="ðŸ“¥ Download PDF Report",
    data=pdf_buffer,
    file_name="economic_report.pdf",
    mime="application/pdf"
)