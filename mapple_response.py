# -*- coding: utf-8 -*-
"""mapple_response.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBgokslmxSxhAJErbjI9nOLCyLhvCUwc
"""

import streamlit as st
import pandas as pd
import numpy as np
import statsmodels.api as sm
import plotly.express as px

# Title of the Web App
st.title("Trade Impact Analysis & Policy Simulation Tool")

# Sidebar for User Input
st.sidebar.header("Simulation Settings")

# User Inputs: Select Industry & Tariff Rate
sectors = ["Automotive", "Agriculture", "Manufacturing", "Energy", "Technology"]
selected_sector = st.sidebar.selectbox("Select Industry Sector:", sectors)
tariff_rate = st.sidebar.slider("Tariff Rate Increase (%)", 10, 50, 25, 5)

# Gravity Model Data (Mock Data for Demonstration)
trade_data = pd.DataFrame({
    "Tariff Rate": [0, 5, 10, 15, 20, 25, 30],
    "GDP_Canada": [1800, 1800, 1800, 1800, 1800, 1800, 1800],  # Billion CAD
    "GDP_USA": [22000, 22000, 22000, 22000, 22000, 22000, 22000],  # Billion USD
    "Distance": [3000, 3000, 3000, 3000, 3000, 3000, 3000],  # km
    "Trade Volume (Billion CAD)": [500, 480, 450, 420, 390, 360, 330]  # Exports from Canada to USA
})

# Fit Gravity Model using OLS Regression
X = trade_data[['Tariff Rate', 'GDP_Canada', 'GDP_USA', 'Distance']]
X = sm.add_constant(X)  # Add intercept (constant term)
y = trade_data['Trade Volume (Billion CAD)']
model = sm.OLS(y, X).fit()

# Prepare input for prediction
new_data = pd.DataFrame([[tariff_rate, 1800, 22000, 3000]],
                        columns=['Tariff Rate', 'GDP_Canada', 'GDP_USA', 'Distance'])
new_data = sm.add_constant(new_data)  # Ensure the constant term is added

# Predict Trade Volume
predicted_trade_volume = model.predict(new_data)[0]

# Display Trade Impact Analysis
st.subheader("Economic Impact Analysis")
trade_impact_data = pd.DataFrame({
    "Indicator": ["Predicted Trade Volume (Billion CAD)", "GDP Loss Estimate (Billion CAD)", "Job Loss Estimate"],
    "Estimated Value": [round(predicted_trade_volume, 2), round(0.05 * tariff_rate, 2), round(3000 * tariff_rate, 0)]
})
st.table(trade_impact_data)

# Retaliatory Tariff Policy Simulation
st.subheader("Policy Response Simulation")
retaliatory_tariffs = {
    "U.S. Imports Affected (Billion CAD)": round(0.2 * tariff_rate, 2),
    "Potential Revenue from Tariffs (Billion CAD)": round(0.08 * tariff_rate, 2)
}
st.write("**Retaliatory Tariffs:**", retaliatory_tariffs)

# Alternative Trade Market Analysis
st.subheader("Alternative Trade Market Analysis")
alternative_markets = pd.DataFrame({
    "Market": ["EU", "China", "Mexico", "India", "Japan"],
    "Potential Increase in Exports (Billion CAD)": np.random.uniform(5, 20, 5).round(2)
})
st.dataframe(alternative_markets)

# Visualization: Trade Exposure by Province
st.subheader("Trade Exposure by Province")
province_data = pd.DataFrame({
    "Province": ["Ontario", "Quebec", "British Columbia", "Alberta", "Manitoba"],
    "Trade Exposure (%)": np.random.randint(20, 60, 5)
})
fig = px.bar(province_data, x="Province", y="Trade Exposure (%)", color="Trade Exposure (%)",
             title="Provincial Trade Exposure to U.S. Tariffs", text="Trade Exposure (%)")
st.plotly_chart(fig)

st.markdown("# Prototype Version 1.1 - Developed by VisiVault Analytics Ltd.")
