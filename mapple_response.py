# -*- coding: utf-8 -*-
"""Untitled108.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BWvPLs9O5-RKRQE00R9Ds9-4-8voAkux
"""

import streamlit as st
import pandas as pd
import numpy as np
import statsmodels.api as sm
import plotly.express as px
import requests
import io
import joblib
from fpdf import FPDF
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# ==================== 🇨🇦 Styling for Visibility 🇨🇦 ====================
st.markdown(
    """
    <style>
        .stApp { background-color: #ffffff; }
        .title-text { font-size: 36px; font-weight: bold; color: #4a4a4a; text-align: center; }
        .sub-header { font-size: 24px; font-weight: bold; color: #333333; text-align: center; }
        .info-text { font-size: 18px; color: #4a4a4a; text-align: center; }
    </style>
    """,
    unsafe_allow_html=True,
)

# ==================== 🇨🇦 Title & Header 🇨🇦 ====================
st.markdown('<p class="title-text">🍁 Trade Impact Analysis & Policy Simulation Tool 🍁</p>', unsafe_allow_html=True)
st.image("https://upload.wikimedia.org/wikipedia/commons/c/cf/Flag_of_Canada.svg", width=200)

# ==================== 🌍 Fetch Real-Time Economic Data 🌍 ====================
st.markdown('<p class="sub-header">📊 Real-Time Economic Indicators</p>', unsafe_allow_html=True)
world_bank_url = "https://api.worldbank.org/v2/country/CA/indicator/NY.GDP.MKTP.CD?format=json"
response = requests.get(world_bank_url)

if response.status_code == 200:
    data = response.json()
    latest_gdp = data[1][0]["value"]
    st.markdown(f'<p class="info-text">🇨🇦 **Canada GDP (Latest):** CAD {latest_gdp:,.2f}</p>', unsafe_allow_html=True)
else:
    latest_gdp = 2000  # Default fallback
    st.markdown('<p class="info-text">⚠️ Unable to fetch real-time GDP data.</p>', unsafe_allow_html=True)

# ==================== 🇨🇦 Sidebar Inputs 🇨🇦 ====================
st.sidebar.header("🇨🇦 Simulation Settings 🇨🇦")

sectors = ["Automotive", "Agriculture", "Manufacturing", "Energy", "Technology"]
selected_sector = st.sidebar.selectbox("Select Industry Sector:", sectors)
tariff_rate = st.sidebar.slider("Tariff Rate Increase (%)", 10, 50, 25, 5)

# ==================== 📉 Economic Impact Analysis 📉 ====================
st.markdown('<p class="sub-header">📉 Economic Impact Analysis</p>', unsafe_allow_html=True)

predicted_trade_volume = round(500 - (tariff_rate * 5), 2)
gdp_loss = round(0.05 * tariff_rate, 2)
job_loss = round(3000 * tariff_rate, 0)

economic_table = pd.DataFrame({
    "Indicator": ["Predicted Trade Volume (Billion CAD)", "GDP Loss Estimate (Billion CAD)", "Job Loss Estimate"],
    "Estimated Value": [predicted_trade_volume, gdp_loss, job_loss]
})

st.table(economic_table)

# ==================== 📊 AI-Powered Trade Forecasting 📊 ====================
st.markdown('<p class="sub-header">📊 Predictive Economic Simulation</p>', unsafe_allow_html=True)

def train_ai_model():
    """Train and save a predictive model using economic data."""
    data = {
        "Tariff Rate (%)": [10, 20, 30, 40, 50],
        "Subsidy (Billion CAD)": [5, 10, 15, 20, 25],
        "Corporate Tax Change (%)": [1, -2, 0, 3, -1],
        "GDP (Billion CAD)": [2000, 2100, 1950, 2200, 2050],
        "Trade Volume (Billion CAD)": [500, 480, 450, 430, 410]
    }
    df = pd.DataFrame(data)
    X = df[["Tariff Rate (%)", "Subsidy (Billion CAD)", "Corporate Tax Change (%)", "GDP (Billion CAD)"]]
    y = df["Trade Volume (Billion CAD)"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    model.fit(X_train, y_train)
    joblib.dump(model, "ai_trade_model.pkl")

try:
    model = joblib.load("ai_trade_model.pkl")
    future_trade_volume = model.predict([[tariff_rate, 10, 0, latest_gdp]])[0]
    st.markdown(f'<p class="info-text">📈 **Predicted Trade Volume in 5 Years:** {future_trade_volume:,.2f} Billion CAD</p>', unsafe_allow_html=True)
except:
    train_ai_model()
    st.markdown('<p class="info-text">⚠️ AI model trained. Reload the app to use predictions.</p>', unsafe_allow_html=True)

# ==================== 📄 Export Reports 📄 ====================
st.markdown('<p class="sub-header">📑 Export Report</p>', unsafe_allow_html=True)

# 📥 Export to Excel
excel_buffer = io.BytesIO()
economic_table.to_excel(excel_buffer, index=False)
st.download_button(
    label="📥 Download Excel Report",
    data=excel_buffer.getvalue(),
    file_name="trade_impact_analysis.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

# 📥 Export to PDF
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)
pdf.cell(200, 10, "Trade Impact Analysis Report", ln=True, align='C')
pdf.ln(10)
pdf.cell(200, 10, f"Predicted Trade Volume: {predicted_trade_volume} Billion CAD", ln=True)
pdf.cell(200, 10, f"GDP Loss Estimate: {gdp_loss} Billion CAD", ln=True)
pdf.cell(200, 10, f"Job Loss Estimate: {job_loss}", ln=True)

pdf_buffer = io.BytesIO()
pdf.output(pdf_buffer, 'F')
st.download_button(
    label="📥 Download PDF Report",
    data=pdf_buffer.getvalue(),
    file_name="trade_impact_analysis.pdf",
    mime="application/pdf"
)

# ==================== ✅ Final Message ✅ ====================
st.markdown('<p class="info-text">🍁 <strong>Prototype Version 2.1 - Developed by VisiVault Analytics Ltd.</strong> 🍁</p>', unsafe_allow_html=True)